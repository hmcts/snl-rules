package uk.gov.hmcts.reform.sandl.snlrules.rules

import uk.gov.hmcts.reform.sandl.snlrules.model.now.Year;
import uk.gov.hmcts.reform.sandl.snlrules.model.now.Month;
import uk.gov.hmcts.reform.sandl.snlrules.model.now.Day;
import uk.gov.hmcts.reform.sandl.snlrules.model.Problem;
import uk.gov.hmcts.reform.sandl.snlrules.model.ProblemReference;
import uk.gov.hmcts.reform.sandl.snlrules.model.ProblemTypes;
import uk.gov.hmcts.reform.sandl.snlrules.model.ProblemSeverities;
import uk.gov.hmcts.reform.sandl.snlrules.model.Session;
import uk.gov.hmcts.reform.sandl.snlrules.model.SearchSession;
import uk.gov.hmcts.reform.sandl.snlrules.model.SearchSessionResult;
import uk.gov.hmcts.reform.sandl.snlrules.model.Judge;
import uk.gov.hmcts.reform.sandl.snlrules.model.Availability;
import uk.gov.hmcts.reform.sandl.snlrules.model.Room;
import uk.gov.hmcts.reform.sandl.snlrules.model.BookableJudge;
import uk.gov.hmcts.reform.sandl.snlrules.utils.DateTimeUtils;

import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

rule "Session Time For the Judge not Available"
    when
        $s : Session(judgeId != null)
        $j : Judge(id == $s.judgeId)
        not Availability(judgeId == $s.judgeId && ($s.start.compareTo(start) >= 0 && $s.end.compareTo(end) <= 0))
    then
        insertLogical(new Problem(ProblemTypes.Resource_missing,
                                  ProblemSeverities.Warn,
                                  "Session Time For the Judge not Available",
                                  new ProblemReference($s),
                                  new ProblemReference($j)));
end

rule "Session does not have a judge 4 weeks or less before start"
    when
        Year($year: value)
        Month($month: value)
        Day($day: value)
        $s : Session(judgeId == null && DateTimeUtils.between(start, $year, $month, $day, 0, 28))
    then
        insertLogical(new Problem(ProblemTypes.Resource_missing,
                                  ProblemSeverities.Warn,
                                  "Session does not have a judge 4 weeks or less before start",
                                  new ProblemReference($s)));
end

rule "Session does not have a room 4 weeks or less before start"
    when
        Year($year: value)
        Month($month: value)
        Day($day: value)
        $s : Session(roomId == null && DateTimeUtils.between(start, $year, $month, $day, 0, 28))
    then
        insertLogical(new Problem(ProblemTypes.Resource_missing,
                                  ProblemSeverities.Warn,
                                  "Session does not have a room 4 weeks or less before start",
                                  new ProblemReference($s)));
end

rule "Double booking of judge (includes any overlapping)"
    when
        Year($year: value)
        Month($month: value)
        Day($day: value)
        $s : Session(judgeId != null && DateTimeUtils.isAfter(start, $year, $month, $day))
        $judge : Judge(id == $s.judgeId)
        $s2 : Session(this != $s && id <= $s.id && judgeId != null && $s.judgeId != null && judgeId == $s.judgeId && isOverlapping($s))
    then
        insertLogical(new Problem(ProblemTypes.Resource_contention,
                                  ProblemSeverities.Warn,
                                  "Double booking of judge",
                                  new ProblemReference($s),
                                  new ProblemReference($s2),
                                  new ProblemReference($judge)));
end

rule "Double booking of room (includes any overlapping) 2 weeks before start"
    when
        Year($year: value)
        Month($month: value)
        Day($day: value)
        $s : Session(roomId != null)
        $room: Room(id == $s.roomId)
        $s2 : Session(this != $s && id <= $s.id && roomId != null && $s.roomId != null && roomId == $s.roomId && isOverlapping($s)
                        && DateTimeUtils.between(start, $year, $month, $day, 0, 14))
    then
        insertLogical(new Problem(ProblemTypes.Resource_contention,
                                  ProblemSeverities.Warn,
                                  "Double booking of room",
                                  new ProblemReference($s),
                                  new ProblemReference($s2),
                                  new ProblemReference($room)));
end

//rule "cos tam robi"
//  when
//    $s: Session($start: start, $id: id)
//    $s2: Session(id != $id && DateTimeUtils.sameDay($start, start))
//    $a: Availability(DateTimeUtils.sameDay($start, start))
//  then
//    insertLogical(new Exception($a.getStart() + " "
//    + $a.getDuration() + " " + $s.getStart() + " " + $s.getDuration() + " " + $s2.getStart() + " " + $s2.getDuration() +
//    " *** " + $s2.getStart().plus($s2.getDuration())));
//end

//rule "cos tam robi pomiedzy"
//  when
//    $s: Session($start: start, $id: id)
//    $s2: Session(id != $id && DateTimeUtils.sameDay($start, start) && start.plus(duration) < $s.start)
//  then
//    insertLogical(new Exception(
//    " rula pomiedzy *** " + $s2.getStart().plus($s2.getDuration()) + "***" + $s.getStart()));
//end
//
//rule "cos tam robi po"
//  when
//    $s: Availability($start: start, $id: id)
//    $s2: Session(id < $id && DateTimeUtils.sameDay($start, start) && start.plus(duration) > $s.start )
//  then
//    insertLogical(new Exception(
//    "rula po *** " + $s2.getStart().plus($s2.getDuration()) + "***" + $s.getStart().plus($s.getDuration())));
//end
//
//
//rule "cos tam robi przed"
//  when
//    $s: Availability($start: start, $id: id)
//    $s2: Session(id < $id && DateTimeUtils.sameDay($start, start) && start > $s.start )
//  then
//    insertLogical(new Exception(
//    "rula przed *** " + $s.getStart() + "***" + $s2.getStart()));
//end
//

rule "Judge without sessions is always bookable"
when
      $j : Judge($judgeId: id)
      $a : Availability(judgeId == $judgeId)
      not Session(judgeId == $judgeId && DateTimeUtils.contains($a.start, $a.getEnd(), start, getEnd()))
then
    insertLogical(new BookableJudge($j.getId(), $a.getStart(), $a.getDuration()));
end

rule "Judge is bookable before first session"
when
      $j : Judge($judgeId: id)
      $a : Availability(judgeId == $judgeId)
      $s : Session(judgeId == $judgeId && DateTimeUtils.contains($a.start, $a.getEnd(), getStart(), getEnd()))
      not Session(judgeId == $judgeId && DateTimeUtils.contains($a.start, $a.getEnd(), getStart(), getEnd())
                  && start.isBefore($s.start))
then
      insertLogical(new BookableJudge($judgeId, $a.getStart(), Duration.between($a.getStart(), $s.getStart())));
end

rule "Judge is bookable after last session"
when
      $j : Judge($judgeId: id)
      $a : Availability(judgeId == $judgeId)
      $s : Session(judgeId == $judgeId && DateTimeUtils.contains($a.start, $a.getEnd(), getStart(), getEnd()))
      not Session(judgeId == $judgeId && DateTimeUtils.contains($a.start, $a.getEnd(), getStart(), getEnd())
                  && getEnd().isAfter($s.getEnd()))
then
      insertLogical(new BookableJudge($judgeId, $s.getEnd(), Duration.between($s.getEnd(), $a.getEnd())));
end


rule "Judge is bookable between sessions"
when
      $j : Judge($judgeId: id)
      $a : Availability(judgeId == $judgeId)
      $s1 : Session(judgeId == $judgeId && DateTimeUtils.contains($a.start, $a.getEnd(), getStart(), getEnd()))
      $s2 : Session(judgeId == $judgeId && DateTimeUtils.contains($a.start, $a.getEnd(), getStart(), getEnd())
                     && start.isAfter($s1.getEnd()))
      not Session(judgeId == $judgeId && DateTimeUtils.contains($a.start, $a.getEnd(), getStart(), getEnd())
                  && start.isAfter($s1.getEnd())
                  && start.isBefore($s2.start))
then
      insertLogical(new BookableJudge($judgeId, $s1.getEnd(), Duration.between($s1.getEnd(), $s2.getStart())));
end

query "exception" (OffsetDateTime from, OffsetDateTime to)
  $ex: BookableJudge()
end

