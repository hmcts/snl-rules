package uk.gov.hmcts.reform.sandl.snlrules.rules

import java.time.OffsetDateTime;
import java.time.ZoneOffset;

import uk.gov.hmcts.reform.sandl.snlrules.model.Session;
import uk.gov.hmcts.reform.sandl.snlrules.model.Judge;
import uk.gov.hmcts.reform.sandl.snlrules.model.Availability;
import uk.gov.hmcts.reform.sandl.snlrules.model.Problem;
import uk.gov.hmcts.reform.sandl.snlrules.model.ProblemTypes;
import uk.gov.hmcts.reform.sandl.snlrules.model.now.Year;
import uk.gov.hmcts.reform.sandl.snlrules.model.now.Month;
import uk.gov.hmcts.reform.sandl.snlrules.model.now.Day;

rule "Session Time For the Judge not Available"
    when
        $s : Session()
        not Availability(judgeId == $s.judgeId && ($s.start.compareTo(start) >= 0 && $s.end.compareTo(end) <= 0))
    then
        insertLogical(new Problem(ProblemTypes.Session_does_not_have_a_judge_available,
                                  String.format("session:%s, judge:%s", $s.getId(), $s.getJudgeId())));
end

rule "Session does not have a judge 4 weeks or less before start"
    when
        Year($year: year)
        Month($month: month)
        Day($day: day)
        $s : Session(judgeId == null && start.minusWeeks(4).compareTo(OffsetDateTime.of($year, $month, $day, 0, 0, 0, 0, ZoneOffset.UTC)) <= 0)
    then
        insertLogical(new Problem(ProblemTypes.Session_does_not_have_a_judge_4_weeks_or_nearer_before_start,
                                  String.format("session:%s", $s.getId())));
end

rule "Session does not have a room 4 weeks or less before start"
    when
        Year($year: year)
        Month($month: month)
        Day($day: day)
        $s : Session(roomId == null && start.minusWeeks(4).compareTo(OffsetDateTime.of($year, $month, $day, 0, 0, 0, 0, ZoneOffset.UTC)) <= 0)
    then
        insertLogical(new Problem(ProblemTypes.Session_does_not_have_a_room_4_weeks_or_nearer_before_start,
                                  String.format("session:%s", $s.getId())));
end

rule "Double booking of judge (includes any overlapping)"
    no-loop
    when
        $s : Session()
        $s2 : Session(id != $s.id && isOverlapping($s))

        // this check is to prevent the problem being inserted twice for each session,
        // thanks to the check it will not be inserted twice
        // it requires no-loop on the rule otherwise it ends in an infinitive loop
        // due to the fact that the problem is created in this rule
        not Problem(type == ProblemTypes.Double_booking_of_judge_includes_any_overlapping
              && (toString().contains($s.id) || toString().contains($s2.id)))
    then
        insertLogical(new Problem(ProblemTypes.Double_booking_of_judge_includes_any_overlapping,
                                  String.format("session:%s, session:%s", $s.getId(), $s2.getId())));
end


