package uk.gov.hmcts.reform.sandl.snlrules.rules

import java.time.OffsetDateTime;
import java.time.ZoneOffset;

import uk.gov.hmcts.reform.sandl.snlrules.model.now.Year;
import uk.gov.hmcts.reform.sandl.snlrules.model.now.Month;
import uk.gov.hmcts.reform.sandl.snlrules.model.now.Day;
import uk.gov.hmcts.reform.sandl.snlrules.model.Problem;
import uk.gov.hmcts.reform.sandl.snlrules.model.ProblemTypes;
import uk.gov.hmcts.reform.sandl.snlrules.model.Session;
import uk.gov.hmcts.reform.sandl.snlrules.model.Judge;
import uk.gov.hmcts.reform.sandl.snlrules.model.Availability;
import uk.gov.hmcts.reform.sandl.snlrules.model.HearingPart;


rule "Session Time For the Judge not Available"
    when
        $s : Session()
        not Availability(judgeId == $s.judgeId && ($s.start.compareTo(start) >= 0 && $s.end.compareTo(end) <= 0))
    then
        insertLogical(new Problem(ProblemTypes.Session_does_not_have_a_judge_available,
                                  String.format("session:%s, judge:%s", $s.getId(), $s.getJudgeId())));
end

rule "Session does not have a judge 4 weeks or less before start"
    when
        Year($year: year)
        Month($month: month)
        Day($day: day)
        $s : Session(judgeId == null && start.minusWeeks(4).compareTo(OffsetDateTime.of($year, $month, $day, 0, 0, 0, 0, ZoneOffset.UTC)) <= 0)
    then
        insertLogical(new Problem(ProblemTypes.Session_does_not_have_a_judge_4_weeks_or_nearer_before_start,
                                  String.format("session:%s", $s.getId())));
end

rule "Session does not have a room 4 weeks or less before start"
    when
        Year($year: year)
        Month($month: month)
        Day($day: day)
        $s : Session(roomId == null && start.minusWeeks(4).compareTo(OffsetDateTime.of($year, $month, $day, 0, 0, 0, 0, ZoneOffset.UTC)) <= 0)
    then
        insertLogical(new Problem(ProblemTypes.Session_does_not_have_a_room_4_weeks_or_nearer_before_start,
                                  String.format("session:%s", $s.getId())));
end

rule "Double booking of judge (includes any overlapping)"
    when
        $s : Session()
        $s2 : Session(this != $s && judgeId != null && judgeId == $s.judgeId && isOverlapping($s))
    then
        // this if logic here really is to avoid duplication of the problem for those two conflicting sessions
        // this way both rules runs on both session would produce the same problem (rather than two due to how Problem is coded)
        // looks a bit tricky and needs to get reviewed once the new problem model is done
        // and considered whether it should not be covered by equals and hashcode of Problem (not Fact)
        Problem p1 = new Problem(ProblemTypes.Double_booking_of_judge_includes_any_overlapping,
                    String.format("session:%s, session:%s", $s.getId(), $s2.getId()));
        Problem p2 = new Problem(ProblemTypes.Double_booking_of_judge_includes_any_overlapping,
                    String.format("session:%s, session:%s", $s2.getId(), $s.getId()));

        if (p1.getId().compareTo(p2.getId()) > 0) {
            insertLogical(p1);
        } else {
            insertLogical(p2);
        }
end


rule "Double booking of room (includes any overlapping)"
    when
        Year($year: year)
        Month($month: month)
        Day($day: day)
        $s : Session()
        $s2 : Session(this != $s && roomId != null && roomId == $s.roomId && isOverlapping($s)
                        && start.minusWeeks(2).compareTo(OffsetDateTime.of($year, $month, $day, 0, 0, 0, 0, ZoneOffset.UTC)) <= 0)
    then
        // this if logic here really is to avoid duplication of the problem for those two conflicting sessions
        // this way both rules runs on both session would produce the same problem (rather than two due to how Problem is coded)
        // looks a bit tricky and needs to get reviewed once the new problem model is done
        // and considered whether it should not be covered by equals and hashcode of Problem (not Fact)
        Problem p1 = new Problem(ProblemTypes.Double_booking_of_room_includes_any_overlapping_2_weeks_or_nearer_before_start,
                    String.format("session:%s, session:%s", $s.getId(), $s2.getId()));
        Problem p2 = new Problem(ProblemTypes.Double_booking_of_room_includes_any_overlapping_2_weeks_or_nearer_before_start,
                    String.format("session:%s, session:%s", $s2.getId(), $s.getId()));

        if (p1.getId().compareTo(p2.getId()) > 0) {
            insertLogical(p1);
        } else {
            insertLogical(p2);
        }
end

rule "Session is overlisted and 1 day or less before start"
    when
        Year($year: year)
        Month($month: month)
        Day($day: day)
        $s : Session()
        accumulate(hp : HearingPart(sessionId == $s.id), $hpSumMinutes: sum(hp.getDuration().toMinutes()))
        // 2 days when ingoring hour and minute it needs to be
        Session(this == $s && $hpSumMinutes > duration.toMinutes && start.minusDays(2).compareTo(OffsetDateTime.of($year, $month, $day, 0, 0, 0, 0, ZoneOffset.UTC)) <= 0)
    then
        // System.out.println("Total minutes: " + $hpSumMinutes);
        insertLogical(new Problem(ProblemTypes.Session_is_overlisted_1_day_or_nearer_before_start,
                                      String.format("session:%s", $s.getId())));
end

rule "Session is overlisted greater or equal 50 percent and 1 to 3 days before start"
    when
        Year($year: year)
        Month($month: month)
        Day($day: day)
        $s : Session()
        accumulate(hp : HearingPart(sessionId == $s.id), $hpSumMinutes: sum(hp.getDuration().toMinutes()))
        // 2-5 days when ingoring hour and minute it needs to be
        Session(this == $s && $hpSumMinutes >= duration.toMinutes * 1.5
                && start.minusDays(5).compareTo(OffsetDateTime.of($year, $month, $day, 0, 0, 0, 0, ZoneOffset.UTC)) <= 0
                && start.minusDays(2).compareTo(OffsetDateTime.of($year, $month, $day, 0, 0, 0, 0, ZoneOffset.UTC)) > 0)
    then
        // System.out.println("Total minutes: " + $hpSumMinutes);
        insertLogical(new Problem(ProblemTypes.Session_is_overlisted_greater_or_equal_50_percent_and_1_to_3_days_before_start,
                                      String.format("session:%s", $s.getId())));
end
