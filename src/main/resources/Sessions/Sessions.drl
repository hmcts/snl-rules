package uk.gov.hmcts.reform.sandl.snlrules.rules

import java.time.OffsetDateTime;
import java.time.ZoneOffset;

import uk.gov.hmcts.reform.sandl.snlrules.model.Session;
import uk.gov.hmcts.reform.sandl.snlrules.model.Judge;
import uk.gov.hmcts.reform.sandl.snlrules.model.Availability;
import uk.gov.hmcts.reform.sandl.snlrules.model.Problem;
import uk.gov.hmcts.reform.sandl.snlrules.model.ProblemTypes;
import uk.gov.hmcts.reform.sandl.snlrules.model.now.Year;
import uk.gov.hmcts.reform.sandl.snlrules.model.now.Month;
import uk.gov.hmcts.reform.sandl.snlrules.model.now.Day;

rule "Session Time For the Judge not Available"
    when
        $s : Session()
        not Availability(judgeId == $s.judgeId && ($s.start.compareTo(start) >= 0 && $s.end.compareTo(end) <= 0))
    then
        System.out.println("Session " + $s.getId() + "  not available at specified time for judge " + $s.getJudgeId());
        insertLogical(new Problem($s.getId() + "@" + $s.getJudgeId(), "Session " + $s.getId() + "  not available at specified time for judge " + $s.getJudgeId()));
end

rule "Session does not have a judge 4 weeks or less before start"
    when
        Year($year: year)
        Month($month: month)
        Day($day: day)
        $s : Session(judgeId == null && start.minusWeeks(4).compareTo(OffsetDateTime.of($year, $month, $day, 0, 0, 0, 0, ZoneOffset.UTC)) <= 0)
    then
        insertLogical(new Problem(ProblemTypes.Session_does_not_have_a_judge_4_weeks_or_nearer_before_start,
                                  String.format("session:%s", $s.getId())));
end




