#!groovy
@Library("Infrastructure") _

properties([
  parameters([
    string(name: 'PRODUCT_NAME', defaultValue: 'snl', description: ''),
    string(name: 'APP', defaultValue: 'rules', description: ''),
    string(name: 'ENVIRONMENT', defaultValue: 'sandbox', description: 'Environment where code should be built and deployed'),
    choice(name: 'SUBSCRIPTION', choices: 'sandbox\nnonprod\nprod', description: 'Azure subscriptions available to build in'),
    choice(name: 'VM_SIZE', choices: 'Standard_E2s_v3\nStandard_E4s_v3', description: 'Size of the VM to be created e.g. Standard_E2s_v3'),
    string(name: 'RULES_ENGINE_SUBNET_NAME', defaultValue: 'snl-rules-engine', description: ''),
    booleanParam(name: 'PLAN_ONLY', defaultValue: false, description: 'set to true for skipping terraform apply')
  ])
])

product = params.PRODUCT_NAME
component = params.APP
environment = params.ENVIRONMENT
subscription = params.SUBSCRIPTION
vm_size = params.VM_SIZE
rules_engine_subnet = params.RULES_ENGINE_SUBNET_NAME
planOnly = params.PLAN_ONLY

echo "Building '${product}-${component}' in '${environment}'"

node {
  stage("checkout") {
    stageCheckout('git@github.com:hmcts/snl-rules.git')
  }

  withSubscription(subscription) {
    env.TF_VAR_product = "${product}"
    env.TF_VAR_component = "${component}"
    env.TF_VAR_env = "${environment}"
    env.TF_VAR_vm_size = "${vm_size}"
    env.TF_VAR_rules_engine_subnet = "${rules_engine_subnet}"

    stage("spinInfra") {
      env.TF_VAR_netnum = findFreeSubnet(params.SUBSCRIPTION, params.ENVIRONMENT)[1]
      sh "pwd"
      spinInfra(product, component, environment, planOnly, subscription)
    }
  }
}
