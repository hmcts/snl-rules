#!groovy
@Library("Infrastructure") _

properties([
  parameters([
    string(name: 'PRODUCT_NAME', defaultValue: 'snl', description: ''),
    string(name: 'APP', defaultValue: 'rules', description: ''),
    string(name: 'TYPE', defaultValue: 'java', description: ''),
    string(name: 'ENVIRONMENT', defaultValue: 'sandbox', description: 'Environment where code should be built and deployed'),
    choice(name: 'SUBSCRIPTION', choices: 'sandbox\nnonprod\nprod', description: 'Azure subscriptions available to build in'),
    booleanParam(name: 'PLAN_ONLY', defaultValue: false, description: 'set to true for skipping terraform apply')
  ])
])

productName = params.PRODUCT_NAME
appName = params.APP
subscription = params.SUBSCRIPTION
environment = params.ENVIRONMENT
planOnly = params.PLAN_ONLY
vaultName = "infra-vault-nonprod"

echo "vaultName: '${vaultName}'"

echo "Building '${productName}-${appName}' in '${environment}'"


node {
  env.PATH = "$env.PATH:/usr/local/bin"
  def az = { cmd -> return sh(script: "env AZURE_CONFIG_DIR=/opt/jenkins/.azure-$subscription az $cmd", returnStdout: true).trim() }


  stage("checkout") {
    stageCheckout('git@github.com:hmcts/snl-rules.git')
  }

  withSubscription(subscription) {
    env.TF_VAR_product = "${productName}"
    env.TF_VAR_component = "${appName}"
    env.TF_VAR_env = "${environment}"
    env.TF_VAR_subscription_id = az "keyvault secret show --vault-name '${vaultName}' --name AZURE-SUBSCRIPTION --query value -o tsv"
    env.TF_VAR_FR_azure_client_id = az "keyvault secret show --vault-name '${vaultName}' --name AZURE-CLIENT-ID --query value -o tsv"
    env.TF_VAR_FR_azure_client_secret = az "keyvault secret show --vault-name '${vaultName}' --name AZURE-CLIENT-SECRET --query value -o tsv"
    env.TF_VAR_FR_vaultname = "${vaultName}"

    stage("spinInfra") {
      env.TF_VAR_netnum = findFreeSubnet(params.SUBSCRIPTION, params.ENVIRONMENT)[1]
      sh "pwd"
      spinInfra(productName, environment, planOnly, subscription)
    }
  }
}
